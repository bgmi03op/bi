Classification

library(rpart)
library(rpart.plot)
library(caret)

data(iris)

set.seed(123)  # For reproducibility
index <- sample(1:nrow(iris), 0.8 * nrow(iris))
train_data <- iris[index, ]
test_data <- iris[-index, ]

model <- rpart(Species ~ ., data = train_data, method = "class")

predictions <- predict(model, test_data, type = "class")

conf_matrix <- confusionMatrix(predictions, test_data$Species)
print(conf_matrix)

rpart.plot(model, main = "Decision Tree for Classification", type = 3, extra = 101)

Classificationknn

bankloan <- read.csv("C:\\Users\\LENOVO\\Downloads\\BANK LOAN.csv")
library(caret)
index <- createDataPartition(bankloan$DEFAULTER, p=0.8, list=FALSE)
View(bankloan)
bankloan2 <- subset(bankloan, select = c(-DEFAULTER))
bankloan3 <- scale(bankloan2)
traindata <- bankloan3[index,]
testdata <- bankloan2[-index,]
#create class vector
Ytrain <- bankloan$DEFAULTER[index]
Ytest <- bankloan$DEFAULTER[-index]
library(class)
model_knn <- knn(traindata, testdata, k=23, cl= Ytrain)
table(Ytest, model_knn)
specificity(as.factor(Ytest),as.factor(model_knn),cutoff = 0.5)
sensitivity(as.factor(Ytest),as.factor(model_knn),cutoff = 0.5)

Decision


# Load required libraries
library(rpart)
library(rpart.plot)
library(ggplot2)
library(caret)
library(e1071)
library(pROC)

# Load dataset
data <- read.csv("C:\\Users\\LENOVO\\Downloads\\BANK LOAN.csv") #change path 

# Remove the 'SN' column
data <- data[, -1]

data$DEFAULTER <- as.factor(data$DEFAULTER)
str(data)
set.seed(42)
splitIndex <- caret::createDataPartition(data$DEFAULTER, p=0.8, list=FALSE)
traindata <- data[-splitIndex, ]
testdata <- data[-splitIndex, ]  

# Check data distribution
table(traindata$DEFAULTER)
table(testdata$DEFAULTER)

# Train Decision Tree model
dt_model <- rpart(DEFAULTER ~ ., data=traindata, method="class")
print(dt_model)

# plot images
png("Decision Tree.jpeg", width=1300, height=968)
rpart.plot(dt_model, 
           main="Decision Tree Chart", 
           cex=1)
dev.off()
dt_prob <- predict(dt_model, testdata, type="prob")
dt_pred <- ifelse(dt_prob[,2] > 0.5, 1, 0)
dt_pred <- as.factor(dt_pred)
dt_conf_matrix <- confusionMatrix(dt_pred, testdata$DEFAULTER)
print(dt_conf_matrix)

dt_roc_curve <- roc(testdata$DEFAULTER, dt_prob[,2])
plot(dt_roc_curve, main="ROC Curve - Decision Tree", 
     col="purple", 
     lwd=2)
dt_auc_roc <- auc(dt_roc_curve)

cat("Decision Tree AUC:",dt_auc_roc)

kmeans
library(ggplot2)
data(iris)
iris_data <- iris[, -5]
set.seed(123)  # For reproducibility
kmeans_result <- kmeans(iris_data, centers = 3, nstart = 25)

iris$Cluster <- as.factor(kmeans_result$cluster)

ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Cluster)) +
  geom_point(size = 3) +
  labs(title = "K-Means Clustering on Iris Dataset", x = "Sepal Length", y = "Sepal Width")

linear regression
# Load necessary library
library(ggplot2)
data(mtcars)
head(mtcars)
model <- lm(mpg ~ hp, data = mtcars)
summary(model)
new_data <- data.frame(hp = c(100, 150, 200))
predictions <- predict(model, new_data)
print(predictions)
ggplot(mtcars, aes(x = hp, y = mpg)) +
  geom_point(color = "blue") +
  geom_smooth(method = "lm", col = "red") +
  labs(title = "Linear Regression: MPG vs Horsepower",
       x = "Horsepower (hp)",
       y = "Miles Per Gallon (mpg)")


time series

library(forecast)
data("AirPassengers")
ts_data <- ts(AirPassengers, start = c(1949, 1), frequency = 12)
plot(ts_data, main = "Air Passengers Data", ylab = "Number of Passengers", col = "blue")
decomposed_ts <- decompose(ts_data)
plot(decomposed_ts)
arima_model <- auto.arima(ts_data)
forecast_values <- forecast(arima_model, h = 12)
plot(forecast_values, main = "Air Passengers Forecast", col = "red")
print(forecast_values)